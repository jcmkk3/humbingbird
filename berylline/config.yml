units:
  # Parameters
  # ==========
  cx: 18.5        # Key spacing horizontal
  cy: 17.5        # Key spacing vertical
  sf: 16          # Switch footprint (square)
  angle: 25       # Angle between halves
  pinky_splay: 3  # Degrees of splay between pinky and ring columns
  ring_splay: 2   # Degrees of splay between ring and index columns
  
  # *Note:* not all supported changes are parameterized

  # Constants
  # =========
  xiao_x: 17.5
  xiao_y: 20

points:
  rotate: -angle + pinky_splay + ring_splay
  mirror:
    ref: matrix_inner_top
    shift: [0.5cx, 0.5cx]
    distance: 13

  # Zones
  # =====
  # There are two zones defined: `matrix` and `thumb`
  # - The `matrix` covers all keys used by the pinky - index fingers
  # - The `thumb` zone sits below the matrix keys
  #
  # Top level attributes of `spread`, `stagger`, and `rotate` are defined at the column level
  # - `spread` determines the distance between columns and uses the parameter `cx`
  # - `stagger` is the vertical differences between columns
  #   It is typically based on a fraction of the vertical key spacing `cy`
  # - `rotate` is the "splay" of the column
  #   This should be controlled with the appropriate parameters and not overriden directly
  #
  # Row level attributes serve various utility purposes
  # - `row.skip` is used to remove the bottom key in the pinky and inner columns
  # - `bind` is used to apply extra padding to specific keys in order to fill gaps
  #   or shape the outline produced by `type: keys` in the outline section
  # - `row_net` and `column_net` are used to define the connections between the keys
  #   and other components as defined in the `key.footprints` or `pcb` sections of the config
  # - `tags` are helpers that allow later sections like `outlines` filter selections
  #   to those specific keys
  zones.matrix:
    rows:
      bottom.padding: cy
      home.padding: cy
      top.padding: cy
    columns.pinky:
      spread: cx
      rows:
        bottom.skip: true
        top:
          bind: [0,0.5cx,0.5cy,0]
          row_net: P0
          column_net: P6
        home:
          bind: [0.5cy,0.5cx,0,0]
          row_net: P2
          column_net: P6
        top.mirror:
          row_net: P1
          column_net: P10
        home.mirror:
          row_net: P3
          column_net: P10
    columns.ring:
      origin: [0, cy]
      spread: cx
      stagger: 0.5cy
      rotate: -pinky_splay
      rows:
        top:
          bind: [0,0.5cx,0.5cy,0]
          row_net: P1
          column_net: P6
        home:
          bind: [0,0.5cx,0,0]
          row_net: P3
          column_net: P6
        bottom:
          bind: [0.5cy,0,0,0]
          row_net: P4
          column_net: P6
        top.mirror:
          row_net: P0
          column_net: P10
        home.mirror:
          row_net: P2
          column_net: P10
        bottom.mirror:
          row_net: P5
          column_net: P9
    columns.middle:
      spread: cx
      stagger: cy / 3
      rotate: -ring_splay
      rows:
        top:
          bind: [0,0,0.5cy,0]
          row_net: P0
          column_net: P7
        home:
          bind: [0,0.5cx,0,0]
          row_net: P2
          column_net: P7
        bottom:
          bind: [0.5cy,0.5cx,0,0.5cx]
          row_net: P5
          column_net: P6
        top.mirror:
          row_net: P1
          column_net: P9
        home.mirror:
          row_net: P3
          column_net: P9
        bottom.mirror:
          row_net: P4
          column_net: P9
    columns.index:
      spread: cx
      stagger: -cy / 3
      rows:
        top:
          bind: [0,0,0.5cy,0.5cx]
          row_net: P1
          column_net: P7
        home:
          row_net: P3
          column_net: P7
        bottom:
          bind: [0.5cy,0,0,0]
          row_net: P4
          column_net: P7
        top.mirror:
          row_net: P0
          column_net: P9
        home.mirror:
          row_net: P2
          column_net: P9
        bottom.mirror:
          row_net: P5
          column_net: P8
    columns.inner:
      origin: [0, cy]
      spread: cx
      stagger: -0.5cy
      rows:
        bottom.skip: true
        top:
          bind: [0,0,0.5cy,0.5cx]
          row_net: P0
          column_net: P8
          tags:
            center_top: true
        home:
          bind: [0.5cy,0,0.5cy,0.5cx]
          row_net: P2
          column_net: P8
          tags:
            center_top: true
        top.mirror:
          row_net: P1
          column_net: P8
        home.mirror:
          row_net: P3
          column_net: P8
  zones.thumb:
    anchor:
      ref: matrix_index_bottom
      shift: [cx / 3, -22]
    rows.thumb:
    columns.outer:
      rows:
        thumb:
          bind: [0.5cy, 0.5cx, 0, 0]
          row_net: P5
          column_net: P7
        thumb.mirror:
          row_net: P4
          column_net: P10
    columns.inner:
      spread: cx
      stagger: -0.25cy
      rows:
        thumb:
          bind: [1.5cy, 0, 0, 0]
          row_net: P4
          column_net: P8
        thumb.mirror:
          row_net: P5
          column_net: P10
outlines:
  glue:
    center:
    # View the output of this glue in the `exports._center_raw` export below
      top:
        left:
          ref: matrix_inner_top
          orient: angle
          shift: [0,-0.7cy]
        right:
          ref: mirror_matrix_inner_top
          shift: [0,-0.7cy]
      bottom:
        left:
          ref: thumb_inner_thumb
          orient: angle
        right:
          ref: mirror_thumb_inner_thumb
  exports:
    # The below outlines are intentionally split out in order
    # to view the intermediate steps during transformation
    _outer_raw:
      - type: keys
        side: left
        size: sf
      - type: keys
        side: right
        size: sf
    _center_raw:
      - type: keys
        side: both
        size: sf
        glue: center
        tags: [center_top]  # Include the top center keys in addition to the glue outline
    _center:
      - name: _center_raw
        fillet: 3  # The inner rounding where the glue meets the top center keys
      - operation: subtract
        type: circle
        anchor:
          ref: [thumb_inner_thumb, mirror_thumb_inner_thumb]
          shift: [0, 0.5cy - 60]
        radius: 60  # Should be the same as the last number in `shift` above
    _combined:
      - _outer_raw
      - _center
    _switch_cutouts:
      - type: keys
        side: left
        size: 14
        bound: false
      - type: keys
        side: right
        size: 14
        bound: false
    panel:
      - name: _combined
        fillet: 1
    switch_plate:
      - name: _combined
        fillet: 1
      - operation: subtract
        name: _switch_cutouts
        fillet: 0.5
points.key:
  footprints:
    choc:
      type: choc
      nets:
        from: =row_net
        to: =colrow
      params:
        keycaps: true
    diode:
      type: diode
      anchor:
        shift: [0, -4.7]
        rotate: 180
      nets:
        from: =colrow
        to: =column_net
      params:
        through_hole: false
pcbs:
  humbingbird:
    outlines:
      main:
        outline: panel
    footprints:
      - type: xiao
        anchor:
          ref: [matrix_inner_top, mirror_matrix_inner_top]
          shift: [-(xiao_x / 2), -xiao_y - 0.05cy - 0.7cy]
          # Final vertical shift should be the same as the vertical shift from
          # `glue.top.left` and `glue.top.right` in the outline section above
